$id: https://registry.k6.io/registry.schema.json
$schema: "http://json-schema.org/draft-07/schema"
$ref: "#/$defs/registry"
$defs:
  registry:
    description: |
      k6 Extension Registry.

      The k6 extension registry contains the most important properties of registered extensions.
    type: array
    items:
      $ref: "#/$defs/extension"
  catalog:
    description: |
      k6 Extension Catalog.

      The k6 extension catalog is an alternative representation of the k6 extension registry.
      The catalog stores the extension data in an associative array (object),
      where the key is the import path for JavaScript extensions, and the output name for output extensions.
      This data structure is optimized to resolve extensions as dependencies.
    type: object
    additionalProperties:
      $ref: "#/$defs/extension"
  extension:
    type: object
    description: |
      Properties of the registered k6 extension.

      Only those properties of the extensions are registered, which either cannot be detected automatically, or delegation to the extension is not allowed.

      Properties that are available using the repository manager API are intentionally not registered.

      The string like properties that are included in the generated Grafana documentation are intentionally not accessed via the API of the repository manager. It is not allowed to inject arbitrary text into the Grafana documentation site without approval. Therefore, these properties are registered (eg `description`)
    properties:
      module:
        type: string
        description: |
          The extension's go module path.

          This is the unique identifier of the extension.
          More info about module paths: https://go.dev/ref/mod#module-path

          The extension has no name property, the module path or part of it can be used as the extension name. For example, using the first two elements of the module path after the host name, the name `grafana/xk6-dashboard` can be formed from the module path `github.com/grafana/xk6-dashboard`. This is typically the repository owner name and the repository name in the repository manager.

          The extension has no URL property, a URL can be created from the module path that refers to the extension within the repository manager.
        examples:
          - github.com/grafana/xk6-dashboard
          - github.com/szkiba/xk6-top
      imports:
        type: array
        items:
          type: string
          pattern: "^k6$|^k6/x/"
        description: |
          List of JavaScript import paths registered by the extension.

          Currently, paths must start with the prefix `k6/x/`.

          The extensions used by k6 scripts are automatically detected based on the values specified here, therefore it is important that the values used here are consistent with the values registered by the extension at runtime.
        examples:
          - ["k6/x/csv", "k6/x/csv/stream"]
          - ["k6/x/toml"]
      outputs:
        type: array
        items:
          type: string
        description: |
          List of output names registered by the extension.

          The extensions used by k6 scripts are automatically detected based on the values specified here, therefore it is important that the values used here are consistent with the values registered by the extension at runtime.
        examples:
          - ["dashboard"]
          - ["plugin"]
      description:
        type: string
        default: ""
        description: |
          Brief description of the extension.
        examples:
          - This is a very cool extension, it displays the message 'Hello World!'
      versions:
        type: array
        items:
          type: string
        description: |
          List of supported versions.

          Versions are tags whose format meets the requirements of semantic versioning. Version tags often start with the letter `v`, which is not part of the semantic version.
        examples:
          - ["v0.1.0", "v0.2.0", "v0.2.1"]
      cgo:
        type: boolean
        default: false
        description: |
          Flag indicating the need for cgo.

          The `cgo` property value `true` indicates that cgo must be enabled to build the extension.
      constraints:
        type: string
        pattern: "[vxX*|,&\\^0-9.+-><=, ~]+"
        default: ""
        description: |
          Version constraints.

          Version constraints are primarily used to filter automatically detected versions.
          It can also be used to filter the versions property imported from the origin registry.
        examples:
          - [">=v0.4.0", ">v0.50.0"]
      repo:
        $ref: "#/$defs/repository"
        description: |
          Repository metadata.

          Metadata provided by the extension's git repository manager. Repository metadata are not registered, they are queried at runtime using the repository manager API.
      tier:
        $ref: "#/$defs/tier"
        default: "community"
        description: |
          Maintainer of the extension.

          Possible values:

            - official: Extensions owned, maintained, and designated by Grafana as "official"
            - community: Extensions are listed on the Registry by individual maintainers, groups of maintainers, or other members of the k6 community.

          Extensions owned by the `grafana` GitHub organization are not officially supported by Grafana by default.
          There are several k6 extensions owned by the `grafana` GitHub organization, which were created for experimental or example purposes only.
          The `official` tier value is needed so that officially supported extensions can be distinguished from them.

          If it is missing from the registry source, it will be set with the default "community" value during generation.
        examples:
          - "community"
          - "official"
      compliance:
        $ref: "#/$defs/compliance"
        description: |
          The result of the extension's k6 compliance checks.
    required:
      - module
    additionalProperties: false
  compliance:
    description: |
      The result of the extension's k6 compliance checks.
    type: object
    required:
      - grade
      - level
    properties:
      level:
        description: |
          Compliance expressed as a percentage.

          The `level` property contains a percentage of how well the extension complies with best practices.
          The value of the `level` can be between `0-100` and is determined by the weighted and normalized sum of the scores of the compliance checks.
        examples:
          - 87
          - 34
          - 100
        type: integer
        minimum: 0
        maximum: 100
      grade:
        $ref: "#/$defs/grade"
        description: |
          Compliance expressed as a grade.

          The `grade` property contains a grade (A-F) of how well the extension complies with best practices.
          The value of the `grade` can be `A`,`B`,`C`,`D`,`E`,`F` and is calculated from the `level` property.
        examples:
          - "C"
          - "A"
      issues:
        type: array
        description: |
          A list of compliance check IDs that failed.

          The `issues`` property is primarily used for debugging. It contains the (implementation-dependent) identifiers of those compliance checks that failed.
        items:
          type: string
        examples:
          - ["build", "smoke"]
          - ["readme", "versions"]
    additionalProperties: false
  grade:
    description: |
      The results of the checks are in the form of a grade.
    type: string
    enum: ["A", "B", "C", "D", "E", "F", "G"]
    examples:
      - "C"
      - "A"
  repository:
    type: object
    description: |
      Repository metadata.

      Metadata provided by the extension's git repository manager. Repository metadata are not registered, they are queried at runtime using the repository manager API.
    required:
      - name
      - owner
      - url
    properties:
      name:
        type: string
        description: |
          The name of the repository.
        examples:
          - xk6-dashboard
          - xk6-sql
      owner:
        type: string
        description: |
          The owner of the repository.
        examples:
          - grafana
      url:
        type: string
        description: |
          URL of the repository.

          The URL is provided by the repository manager and can be displayed in a browser.
        examples:
          - https://github.com/grafana/xk6-dashboard
      homepage:
        type: string
        default: ""
        description: |
          The URL to the project homepage.

          If no homepage is set, the value is the same as the url property.
        examples:
          - https://github.com/grafana/xk6-dashboard
      description:
        type: string
        default: ""
        description: |
          Repository description.
        examples:
          - This is a wonderful extension, it says 'Hello Wonderful World!'
      stars:
        type: integer
        default: "0"
        description: |
          The number of stars in the extension's repository.

          The extension's popularity is indicated by how many users have starred the extension's repository.
        examples:
          - 365
          - 202
      topics:
        type: array
        items:
          type: string
        description: |
          Repository topics.

          Topics make it easier to find the repository. It is recommended to set the xk6 topic to the extensions repository.
        examples:
          - ["xk6", "testing"]
          - ["xk6"]
      public:
        type: boolean
        default: "false"
        description: |
          Public repository flag.

          A `true` value indicates that the repository is public, available to anyone.
        examples:
          - true
      license:
        type: string
        default: ""
        description: |
          The SPDX ID of the extension's license.

          For more information about SPDX, visit https://spdx.org/licenses/
        examples:
          - AGPL-3.0-only
          - MIT
      archived:
        type: boolean
        default: "false"
        description: |
          Archived repository flag.

          A `true` value indicates that the repository is archived, read only.

          If a repository is archived, it usually means that the owner has no intention of maintaining it. Such extensions should be removed from the registry.
      timestamp:
        type: number
        default: 0
        description: |
          Last modification timestamp.

          The timestamp property contains the timestamp of the last modification of the repository in UNIX time format (the number of non-leap seconds that have elapsed since 00:00:00 UTC on 1st January 1970).
          Its value depends on the repository manager, in the case of GitHub it contains the time of the last push operation, in the case of GitLab the time of the last repository activity.
        examples:
          - 1725277028
          - 1690893368
      clone_url:
        type: string
        default: ""
        description: |
          URL for the git clone operation.

          The clone_url property contains a (typically HTTP) URL, which is used to clone the repository.
        examples:
          - https://github.com/grafana/xk6-dashboard.git
          - https://github.com/grafana/xk6-sql.git
  tier:
    type: string
    enum: ["official", "community"]
    description: |
      Maintainer of the extension.

      Extensions can be classified according to who maintains the extension.
      This usually also specifies who the user can get support from.

      Possible values:

        - official: Extensions owned, maintained, and designated by Grafana as "official"
        - community: Extensions are listed on the Registry by individual maintainers, groups of maintainers, or other members of the k6 community.

      Extensions owned by the `grafana` GitHub organization are not officially supported by Grafana by default.
      There are several k6 extensions owned by the `grafana` GitHub organization, which were created for experimental or example purposes only.
      The `official` tier value is needed so that officially supported extensions can be distinguished from them.

      If it is missing from the registry source, it will be set with the default `community` value during generation.
    examples:
      - "community"
      - "official"
  metrics:
    type: object
    description: Extension registry metrics.
    properties:
      extension_count:
        type: integer
        default: 0
        description: The total number of extensions.
      tier_official_count:
        type: integer
        default: 0
        description: Number of extensions in the 'official' tier.
      tier_community_count:
        type: integer
        default: 0
        description: Number of extension in the community' tier.
      type_javascript_count:
        type: integer
        default: 0
        description: Number of JavaScript extension.
      type_output_count:
        type: integer
        default: 0
        description: Number of Output extension.
      grade_a_count:
        type: integer
        default: 0
        description: Number of A-grade extensions.
      grade_b_count:
        type: integer
        default: 0
        description: Number of B-grade extensions.
      grade_c_count:
        type: integer
        default: 0
        description: Number of C-grade extensions.
      grade_d_count:
        type: integer
        default: 0
        description: Number of D-grade extensions.
      grade_e_count:
        type: integer
        default: 0
        description: Number of E-grade extensions.
      grade_f_count:
        type: integer
        default: 0
        description: Number of F-grade extensions.
      cgo_count:
        type: integer
        default: 0
        description: Number of extensions requiring cgo.
      issue_module_count:
        type: integer
        default: 0
        description: Number of extensions without valid go.mod.
      issue_replace_count:
        type: integer
        default: 0
        description: Number of extensions with replace directive in go.mod.
      issue_readme_count:
        type: integer
        default: 0
        description: Number of extensions without readme file.
      issue_examples_count:
        type: integer
        default: 0
        description: Number of extensions without examples directory.
      issue_license_count:
        type: integer
        default: 0
        description: Number of extensions without suitable OSS license.
      issue_git_count:
        type: integer
        default: 0
        description: Number of extensions without  git workdir.
      issue_versions_count:
        type: integer
        default: 0
        description: Number of extensions without semantic versioning git tags.
      issue_build_count:
        type: integer
        default: 0
        description: Number of extensions not buildable with the latest k6 version.
      issue_smoke_count:
        type: integer
        default: 0
        description: Number of extensions without smoke test script.
      issue_types_count:
        type: integer
        default: 0
        description: Number of extensions without API declaration file.
      issue_codeowners_count:
        type: integer
        default: 0
        description: Number of extensions without CODEOWNERS file.
    example: |
      {
        "cgo_count": 1,
        "extension_count": 72,
        "grade_a_count": 19,
        "grade_b_count": 4,
        "grade_c_count": 44,
        "grade_d_count": 4,
        "grade_e_count": 1,
        "issue_build_count": 5,
        "issue_codeowners_count": 5,
        "issue_examples_count": 16,
        "issue_replace_count": 2,
        "issue_smoke_count": 51,
        "issue_types_count": 44,
        "tier_community_count": 54,
        "tier_official_count": 18,
        "type_javascript_count": 57,
        "type_output_count": 16
      }
